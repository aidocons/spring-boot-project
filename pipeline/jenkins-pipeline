#!/usr/bin/env groovy
pipeline {
    agent any
    tools {
        maven 'maven'
        jdk 'jdk17'
    }
    environment {
        registry = "fedimersni/java-pipeline"
        registryCredential = 'docker_credentials'
        dockerImage = ''
        AWS_ACCESS_KEY_ID = credentials ("aws_access_key_id")
        AWS_SECRET_ACCESS_KEY = credentials ("aws_secret_access_key")
        AWS_DEFAULT_REGION = "us-east-1"
        AWS_SESSION_TOKEN = credentials("AWS_SESSION_TOKEN")
    }

    stages {
        stage('Git checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/aidocons/java-complete-pipeline.git'
            }
        }
        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
        stage('Unit Tests') {
            steps {
                sh "mvn test -DskipTests=true"
            }
        }
        // stage('Sonar') {
        //     steps {
        //         withSonarQubeEnv('sonar-scanner') {
        //             sh "mvn sonar:sonar"
        //         }
        //     }
        // }
        
        
        
        stage('Build') {
            steps {
                sh 'mvn package -DskipTests=true'
            }
        }
        
        // stage('Deploy to nexus') {
        //     steps {
        //         withMaven(globalMavenSettingsConfig: 'global-maven') {
        //             sh 'mvn deploy -DskipTests=true'
        //         }
        //     }
        // }
        
        stage('Docker Build') {
            steps {
                script {
                    //dockerImage = docker.build registry + ":$BUILD_NUMBER"
                    // This step should not normally be used in your script. Consult the inline help for details.
                    withDockerRegistry(credentialsId: 'docker_credentials', toolName: 'docker') {
                        sh 'docker build -t fedimersni/java-pipeline:latest .'
                    }
                }
            }
        }
        
        stage('Docker Push') {
            steps {
                script {
                    //sh 'chmod 666 /var/run/docker.sock'
                    //dockerImage = docker.build registry + ":$BUILD_NUMBER"
                    // This step should not normally be used in your script. Consult the inline help for details.
                    withDockerRegistry(credentialsId: 'docker_credentials', toolName: 'docker') {
                        sh 'docker push fedimersni/java-pipeline:latest'
                    }
                }
            }
        }
        
       stage('EKS deployment') {
           steps {
               script {
                    // Write AWS credentials to ~/.aws/credentials
            sh '''
                mkdir -p ~/.aws
                echo "[default]" > ~/.aws/credentials
                echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
                echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
                echo "aws_session_token = $AWS_SESSION_TOKEN" >> ~/.aws/credentials
            '''
            
            // Configure kubectl to connect to the EKS cluster
            sh "aws eks update-kubeconfig --name foyer-eks-cluster --region us-east-1"
            
            // Verify and apply Kubernetes configuration
            sh "cat /var/lib/jenkins/.kube/config"
            sh "kubectl apply -f deployment.yaml -n default"
            sh "kubectl apply -f service.yaml -n default"
               }
           }
       }
        
    }
}

